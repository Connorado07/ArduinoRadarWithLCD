#include <Servo.h>
#include <LiquidCrystal.h>


LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

Servo leftRightServo;         // set a variable to map the servo
int leftRightPos = 0;         // set a variable to store the servo position
const int numReadings = 10;   // set a variable for the number of readings to take
int index = 0;                // the index of the current reading
int total = 0;                // the total of all readings
int average = 0;              // the average
int echoPin = 9;              // the SRF05's echo pin
int initPin = 8;              // the SRF05's init pin
unsigned long pulseTime = 0;  // variable for reading the pulse
unsigned long distance = 0;   // variable for storing distance

int redLED = 22;
int yellowLED = 23;
int greenLED = 24;


void setup() {
  leftRightServo.attach(9);
  // make the init pin an output:
  pinMode(initPin, OUTPUT);
  // make the echo pin an input:
  pinMode(echoPin, INPUT);
  pinMode(redLED, OUTPUT);
  pinMode(yellowLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  // initialize the serial port:
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.clear();
  lcd.print("Distance: ");
}


void loop() {


  for (leftRightPos = 0; leftRightPos < 180; leftRightPos++) { // going left to right.
    leftRightServo.write(leftRightPos);
    for (index = 0; index <= numReadings; index++) {         // take x number of readings from the sensor and average them
      digitalWrite(initPin, LOW);
      delayMicroseconds(50);
      digitalWrite(initPin, HIGH);                           // send signal
      delayMicroseconds(50);                                 // wait 50 microseconds for it to return
      digitalWrite(initPin, LOW);                            // close signal
      pulseTime = pulseIn(echoPin, HIGH);                    // calculate time for signal to return
      distance = pulseTime / 58;                             // convert to centimetres
      total = total + distance;                              // update total
      delay(10);
    }
    average = total / numReadings;                             // create average reading

    if (index >= numReadings)  {                               // reset the counts when at the last item of the array
      index = 0;
      total = 0;
    }
    Serial.print("X");                                         // print leading X to mark the following value as degrees
    Serial.print(leftRightPos);                                // current servo position
    Serial.print("V");                                         // preceeding character to separate values
    Serial.println(average);                                   // average of sensor readings

    lcd.begin(16, 2);
    lcd.print("Distance: ");
    lcd.setCursor(0, 1);
    lcd.print(average);
  }
  /*
    start going right to left after we got to 180 degrees
    same code as above
  */
  for (leftRightPos = 180; leftRightPos > 0; leftRightPos--) { // going right to left
    leftRightServo.write(leftRightPos);
    for (index = 0; index <= numReadings; index++) {
      digitalWrite(initPin, LOW);
      delayMicroseconds(50);
      digitalWrite(initPin, HIGH);
      delayMicroseconds(50);
      digitalWrite(initPin, LOW);
      pulseTime = pulseIn(echoPin, HIGH);
      distance = pulseTime / 58;
      total = total + distance;
      delay(10);
    }
    average = total / numReadings;
    if (index >= numReadings)  {
      index = 0;
      total = 0;
    }
    Serial.print("X");
    Serial.print(leftRightPos);
    Serial.print("V");
    Serial.println(average);
  }

  if (distance > 200) {
    digitalWrite(greenLED, HIGH);
  } else if (distance > 100) {
    digitalWrite(yellowLED, HIGH);
  } else if (distance < 100) {
    digitalWrite(redLED, HIGH);
    digitalWrite(yellowLED, HIGH);
    digitalWrite(greenLED, HIGH);
  }
}
